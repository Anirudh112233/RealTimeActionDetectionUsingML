
# 🎥 **Action Recognition Using LSTM**  

A real-time action recognition system leveraging **LSTM-based neural networks** to classify **10 distinct actions**. Powered by **Mediapipe Holistic** for robust keypoint detection and designed with scalability in mind, this project is ready for future enhancements.  

---

## ✨ **Features**  
- **🔟 Action Recognition:** Classifies 10 unique actions in the initial implementation.  
- **⚡ Real-Time Predictions:** Supports both live and recorded inputs for instant recognition.  
- **🛠️ Customizable Dataset:** Easily extendable to include new actions.  
- **🧠 LSTM Model:** Optimized for sequential time-series data such as human motion keypoints.  
- **🎯 Robust Input Processing:** Utilizes Mediapipe Holistic for consistent feature extraction.  

---

## 📂 **Dataset Structure**  

The dataset consists of `.npy` files containing Mediapipe Holistic keypoints for each action. Add new actions by following this simple structure:  

```plaintext
dataset/  
├── action_1/  
│   ├── file1.npy  
│   ├── file2.npy  
│   └── ...  
├── action_2/  
│   ├── file1.npy  
│   ├── file2.npy  
│   └── ...  
└── ...  
```

---

## ⚙️ **Requirements**  
- **Python 3.7+**  
- **TensorFlow 2.0+**  
- **NumPy**  
- **Mediapipe**  
- **Matplotlib**  

Install dependencies with:  
```
pip install tensorflow numpy mediapipe matplotlib
```

---

## 🚀 **Usage**  

### Step 1: Dataset Preparation  
Ensure the dataset follows the proper structure and update the `DATA_PATH` variable in the notebook to point to the dataset location.  

### Step 2: Training the Model  
Train the LSTM model using the provided training cells in the notebook.  

### Step 3: Testing the Model  
Evaluate performance using the provided test sequences.  

### Step 4: Real-Time Recognition  
Test live video predictions by running the real-time recognition section in the notebook.  

---

## 🏗️ **Model Architecture**  
The **LSTM** model is built to handle sequential data with the following layers:  
- **Input Layer:** Processes Mediapipe Holistic keypoints.  
- **LSTM Layers:** Captures temporal patterns in the data.  
- **Dense Layers:** Outputs probabilities for each action.  

---

## 📊 **Current Results**  
- **Actions Recognized:** 10  
- **Accuracy:** 96%  
- **Loss:** 0.08  

---

## 🌟 **Future Enhancements**  
- Expand the dataset to include more actions.  
- Optimize the model architecture and hyperparameters.  
- Deploy on mobile/edge devices for low-latency environments.  
- Integrate **OpenCV** for enhanced live input handling.  

---

## 🤝 **Contributing**  
Contributions are welcome! 🚀  
Feel free to:  
1. Add new actions.  
2. Improve the code or optimize performance.  
3. Fork the repository and open a pull request.  

---

## 📜 **License**  
This project is licensed under the **MIT License**.  
